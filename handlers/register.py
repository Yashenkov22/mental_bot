from aiogram import types, Router, Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from sqlalchemy.ext.asyncio import AsyncSession

from db.queries import register_user, check_user
from handlers.qiuz import start_quiz
from utils.keyboards import admin_kb
from utils.states import RegisterUser
from utils.register_valudate import valid_fullname
from config import ADMIN_ID


register_router = Router()



@register_router.message(Command('start'))
async def start(message: types.Message, session: AsyncSession, state: FSMContext):
    if message.from_user.id == int(ADMIN_ID):
        await message.answer('–í—ã –∞–¥–º–∏–Ω —ç—Ç–æ–≥–æ –±–æ—Ç–∞', reply_markup=admin_kb.as_markup(resize_keyboard=True))
    else:
        check = await check_user(session=session, user_id=message.from_user.id)
        if check:
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}, —ç—Ç–æ –ü–æ–ª–∏—Ü–∏—è –í—ã–≥–æ—Ä–∞–Ω–∏—è, —Ä—É–∫–∏ –Ω–∞ –∫–æ–ø–æ—ÇüòÅ\n–¢—ã —É–∂–µ –≤—Å–µ –∑–Ω–∞–µ—à—å.')
        else:
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}, —ç—Ç–æ –ü–æ–ª–∏—Ü–∏—è –í—ã–≥–æ—Ä–∞–Ω–∏—è, —Ä—É–∫–∏ –Ω–∞ –∫–æ–ø–æ—ÇüòÅ\n–ï—Å–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ, —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –í–∞—à–∏–º –º–µ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º\n–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.')
            await start_register(message, state)
        await message.delete()


async def start_register(message: types.Message, state: FSMContext):
            await state.set_state(RegisterUser.fullname)
            await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é\n–ü—Ä–∏–º–µ—Ä: –ê–≤—Ä–∞–∞–º –†—É—Å—Å–æ')


@register_router.message(RegisterUser.fullname)
async def end_register(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    await state.update_data(fullname=message.text.title())
    data = await state.get_data()

    if not valid_fullname(data['fullname']):
         await state.clear()
         await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–≤–∞ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
         await start_register(message, state)

    else:     
        await message.answer(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {data["fullname"]}')
        await state.clear()
        try:
            await register_user(session=session, data=data, message=message)
        except Exception:
            await message.answer('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        else:
            await message.answer('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å')
            await message.answer('–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —è –±—É–¥—É —É–∑–Ω–∞–≤–∞—Ç—å —É –í–∞—Å –æ–± —É—Ä–æ–≤–Ω–µ –í–∞—à–µ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–æ–≥–¥–∞ –í–∞—Å —Ç—É—à–∏—Ç—åüßØ')
            await message.answer('–î–∞–≤–∞–π —Å—Ä–∞–∑—É –∏ –ø–æ–ø—Ä–æ–±—É–µ–º')
            await start_quiz(bot, message.from_user.id, state=state)

