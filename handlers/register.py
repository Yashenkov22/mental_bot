from aiogram import types, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from sqlalchemy.ext.asyncio import AsyncSession

from db.queries import register_user, check_user
from handlers.main import main_page
from handlers.qiuz import start_quiz
from config import ADMIN_IDS, SECRET_WORD
from utils.states import RegisterUser, ValidateUser
from utils.validate import valid_fullname
from utils.delete_message import try_delete_prev_message, add_message_for_delete


register_router = Router()

register_answer = '''
–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è,

–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —è –±—É–¥—É —É–∑–Ω–∞–≤–∞—Ç—å —É –í–∞—Å –æ–± —É—Ä–æ–≤–Ω–µ –í–∞—à–µ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–æ–≥–¥–∞ –í–∞—Å —Ç—É—à–∏—Ç—åüßØ
'''

#Start command
@register_router.message(Command('start'))
async def start(message: types.Message,
                state: FSMContext,
                session: AsyncSession,
                bot: Bot):

    if message.from_user.id in ADMIN_IDS:
        await main_page(message,
                        state,
                        bot,
                        text='–ü—Ä–∏–≤–µ—Ç, –ë–æ—Å—Å')
    else:
        check = await check_user(session=session, user_id=message.from_user.id)
        
        if check:
            text = '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ü–æ–ª–∏—Ü–∏—è –í—ã–≥–æ—Ä–∞–Ω–∏—è, —Ä—É–∫–∏ –Ω–∞ –∫–æ–ø–æ—ÇüòÅ\n–¢—ã —É–∂–µ –≤—Å–µ –∑–Ω–∞–µ—à—å.'
            await main_page(message,
                            state,
                            bot,
                            text=text)
        else:
            await validate_user(message, state, bot)

    await message.delete()


#Validate on start
async def validate_user(message: types.Message,
                        state: FSMContext,
                        bot: Bot,
                        retry=None):

    await try_delete_prev_message(bot, state)

    await state.set_state(ValidateUser.secret_word)

    text = '–í–≤–µ–¥–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ...' if retry is None else '–•–º..–≠—Ç–æ –Ω–µ —Ç–æ —Å–ª–æ–≤–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑'

    msg = await message.answer(text,
                               disable_notification=True)

    await state.update_data(secret=msg)


@register_router.message(ValidateUser.secret_word)
async def end_validate_user(message: types.Message,
                            state: FSMContext,
                            bot: Bot):
    d = await state.get_data()
    secret = d['secret']
    await bot.delete_message(secret.chat.id, secret.message_id)

    if message.text.lower() == SECRET_WORD:
        await state.clear()
        msg = await message.answer(f'–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ü–æ–ª–∏—Ü–∏—è –í—ã–≥–æ—Ä–∞–Ω–∏—è, —Ä—É–∫–∏ –Ω–∞ –∫–æ–ø–æ—ÇüòÅ\n–ï—Å–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ, —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –í–∞—à–∏–º –º–µ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º\n–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.',
                                   disable_notification=True)
        
        await state.update_data(prev_msg=list())
        data = await state.get_data()

        add_message_for_delete(data, msg)
        
        await start_register(message, state, bot)
    else:
        await validate_user(message,
                            state,
                            bot,
                            retry=True)
    
    await message.delete()


#Register on start
async def start_register(message: types.Message,
                         state: FSMContext,
                         bot: Bot,
                         retry=None):
    await state.set_state(RegisterUser.fullname)

    d = await state.get_data()

    input_name = d.get('input_name')

    if input_name:
        await bot.delete_message(input_name.chat.id, input_name.message_id)

    text = '–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é\n–ü—Ä–∏–º–µ—Ä: –ê–≤—Ä–∞–∞–º –†—É—Å—Å–æ' if retry is None else '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–≤–∞ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑'

    msg = await message.answer(text,
                               disable_notification=True)

    await state.update_data(input_name=msg)


@register_router.message(RegisterUser.fullname)
async def end_register(message: types.Message,
                       state: FSMContext, 
                       session: AsyncSession,
                       bot: Bot):
    fullname = message.text.title()
    data = await state.get_data()
    
    if not valid_fullname(fullname):
        await start_register(message, state, bot, retry=True)

    else:
        msg = None

        try:
            await register_user(session=session, fullname=fullname, message=message)
        except Exception:
            msg = await message.answer('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                                       disable_notification=True)
        else:
            await message.answer(register_answer,
                                 disable_notification=True)
            first_quiz = await message.answer('–î–∞–≤–∞–π —Å—Ä–∞–∑—É –∏ –ø–æ–ø—Ä–æ–±—É–µ–º',
                                       disable_notification=True)

            await state.update_data(first_quiz=first_quiz)

            await start_quiz(bot, message.from_user.id, state=state)

        input_name = data.get('input_name')

        if input_name:
            await bot.delete_message(input_name.chat.id, input_name.message_id)

        add_message_for_delete(data, msg)

    await message.delete()