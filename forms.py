from aiogram.fsm.state import StatesGroup, State
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.filters import Command
from db.queries import register_user
from sqlalchemy.ext.asyncio import AsyncSession
from db.queries import check_user


form_router = Router()


class Form(StatesGroup):
    first_name: str = State()
    last_name: str = State()


@form_router.message(Command('start'))
async def start(message: types.Message, session_maker, state: FSMContext = None):
    check = await check_user(session=session_maker, user_id=message.from_user.id)
    if check:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}, —ç—Ç–æ –ü–æ–ª–∏—Ü–∏—è –í—ã–≥–æ—Ä–∞–Ω–∏—è, —Ä—É–∫–∏ –Ω–∞ –∫–æ–ø–æ—ÇüòÅ\n–¢—ã —É–∂–µ –≤—Å–µ –∑–Ω–∞–µ—à—å.')
        await message.answer(str(message.chat.id))
    else:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}, —ç—Ç–æ –ü–æ–ª–∏—Ü–∏—è –í—ã–≥–æ—Ä–∞–Ω–∏—è, —Ä—É–∫–∏ –Ω–∞ –∫–æ–ø–æ—ÇüòÅ\n–ï—Å–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ, —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –í–∞—à–∏–º –º–µ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º\n–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.')

        await state.set_state(Form.first_name)
        await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è')
    await message.delete()


@form_router.message(Form.first_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text.capitalize())
    await message.answer(f'–¢–≤–æ–µ –∏–º—è {message.text.capitalize()}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—è')
    await state.set_state(Form.last_name)


@form_router.message(Form.last_name)
async def process_last_name(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(last_name=message.text.capitalize())
    data = await state.get_data()
    await message.answer(f'–í–∞—à–µ –∏–º—è: {data["first_name"]} {data["last_name"]}')
    await state.clear()
    success = await register_user(session=session, data=data, message=message)
    if success:
        await message.answer('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å')
    else:
        await message.answer('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å')
        

